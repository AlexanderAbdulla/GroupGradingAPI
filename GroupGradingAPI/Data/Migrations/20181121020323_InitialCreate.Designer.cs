// <auto-generated />
using GroupGradingAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace GroupGradingAPI.Data.Migrations
{
    [DbContext(typeof(GradingContext))]
    [Migration("20181121020323_InitialCreate")]
    partial class InitialCreate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("GroupGradingAPI.Models.Course", b =>
                {
                    b.Property<string>("CourseYear")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseCrn")
                        .IsRequired();

                    b.Property<string>("CourseName");

                    b.Property<string>("CourseTerm")
                        .IsRequired();

                    b.Property<string>("InstructorId");

                    b.HasKey("CourseYear");

                    b.HasAlternateKey("CourseCrn");


                    b.HasAlternateKey("CourseTerm");

                    b.ToTable("Courses");
                });

            modelBuilder.Entity("GroupGradingAPI.Models.CourseStudent", b =>
                {
                    b.Property<string>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseCrn");

                    b.Property<string>("CourseTerm");

                    b.Property<string>("Courseyear");

                    b.Property<string>("StudentId")
                        .IsRequired();

                    b.HasKey("CourseId");

                    b.HasAlternateKey("StudentId");


                    b.HasAlternateKey("CourseId", "StudentId");

                    b.ToTable("CourseStudents");
                });

            modelBuilder.Entity("GroupGradingAPI.Models.Evaluation", b =>
                {
                    b.Property<string>("EvaluationId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseCrn");

                    b.Property<string>("CourseTerm");

                    b.Property<string>("CourseYear");

                    b.Property<string>("StudentGroupId");

                    b.HasKey("EvaluationId");

                    b.ToTable("Evaluations");
                });

            modelBuilder.Entity("GroupGradingAPI.Models.Grade", b =>
                {
                    b.Property<string>("GradeId")
                        .ValueGeneratedOnAdd();

                    b.Property<double>("Percentage");

                    b.Property<string>("StudentId");

                    b.HasKey("GradeId");

                    b.ToTable("Grades");
                });

            modelBuilder.Entity("GroupGradingAPI.Models.Instructor", b =>
                {
                    b.Property<string>("InstructorId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("InstructorRoleId");

                    b.Property<string>("LastName");

                    b.Property<string>("Password");

                    b.HasKey("InstructorId");

                    b.ToTable("Instructors");
                });

            modelBuilder.Entity("GroupGradingAPI.Models.InstructorRole", b =>
                {
                    b.Property<string>("InstructorRoldeId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Role");

                    b.HasKey("InstructorRoldeId");

                    b.ToTable("InstructorRoles");
                });

            modelBuilder.Entity("GroupGradingAPI.Models.Student", b =>
                {
                    b.Property<string>("CourseId")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Email");

                    b.Property<string>("FirstName");

                    b.Property<string>("LastName");

                    b.Property<string>("StudentId")
                        .IsRequired();

                    b.HasKey("CourseId");

                    b.HasAlternateKey("StudentId");


                    b.HasAlternateKey("CourseId", "StudentId");

                    b.ToTable("Students");
                });

            modelBuilder.Entity("GroupGradingAPI.Models.StudentGroup", b =>
                {
                    b.Property<string>("GroupName")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("CourseId");

                    b.Property<string>("EvaluationId");

                    b.Property<string>("StudentId");

                    b.HasKey("GroupName");

                    b.ToTable("StudentGroup");
                });
#pragma warning restore 612, 618
        }
    }
}
